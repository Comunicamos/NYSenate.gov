<?php
// $Id$

/**
 *  @file
 *  NYSS Views
 *
 *  This module defines default custom views.
 */

/**
 * Implementation of hook_menu().
 */
function nyss_views_menu() {
  $items['calendar/legislative-cable-channel/thisweek'] = array(
    'title' => 'Cable channel',
    'page callback' => 'nyss_views_weekly_legislative_cable_view',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

function nyss_views_weekly_legislative_cable_view() {
  $date = date_create();
  $week = date_week(date_format($date, 'Y-m-d'));
  $redirect = 'calendar/legislative-cable-channel/' . date_format($date, 'Y-\W') . $week;
  drupal_goto($redirect);
}

/**
* Valid permissions for this module
* @return array An array of valid permissions for the custom views module
*/
function nyss_views_perm() {
  return array('view all requests to promote content');
}

/**
 *  Implements hook_views_query_alter().
 */
function nyss_views_views_query_alter(&$view, &$query) {
  global $user;
  // Because of the node access grants for office editors,
  // we need to have distinct queries for them.
  if (($view->name != 'nyss_user') && (in_array('Office Editor', $user->roles) || in_array('Web Editor', $user->roles) || in_array('admin', $user->roles))) {
    $query->distinct = TRUE;
  }
  if ($view->name == 'events_calendar') {
    if (context_isset('nyss', 'senator')) {
      $senator = context_get('nyss', 'senator');
      if ($view->current_display == 'feed_1' && $senator->field_sessioncal[0]['value'] == 0) {
        $query->where[0]['clauses'][3] .= ' OR node_data_field_public_hearing.field_public_hearing_value = \'2\'';
      } else if ($senator->field_sessioncal[0]['value'] == 0) {
        $query->where[0]['clauses'][2] .= ' OR node_data_field_public_hearing.field_public_hearing_value = \'2\'';
      }
    }
  }
  else if ($view->name == 'gallery' && $view->current_display == 'page_2') {
    // This alters a senator's gallery view query, for /senator/[name]/gallery.
    // Add a test for field-feature-image not null.
    $query->where[0]['clauses'][] = "node_data_field_feature_image.field_feature_image_list IS NOT NULL";
  }
  else if ($view->name == 'committee_updates' && $view->current_display == 'page_2') {
    // This alters a 'committees update' view query, for /committees/updates.
    // Add a test for field_committee_nid not null.
    $query->where[0]['clauses'][2] = "node_data_field_committee.field_committee_nid IS NOT NULL";
  }
  else if ($view->name == 'event_editor_access' && nyss_editors_allowed_committees() != 'all') {
    // This alters an 'event editor access' view query, which is used to create the autocomplete list of related events in event-relatable content types.
    // Editors can attach their content to events if (1) they have permission to edit the event, or (2) the event is unrelated to a committee.
    // This clause enables condition (2).
    $query->where[0]['clauses'][1] .= $query->where[0]['clauses'][1] ? " OR " : '';
    $query->where[0]['clauses'][1] .= "node_data_field_committee.field_committee_nid IS NULL";
  }
  else if ($view->name == 'content_pages') {
    // Ensure that main senate content pages & blocks filter by whether they don't reference a senator,
    // OR if they've been promoted to the front.
    $query->where[] = array(
      'clauses' => array(
        "node_data_field_senator.field_senator_nid IS NULL",
        "flag_content_node.uid IS NOT NULL",
      ),
      'args' => array(),
      'type' => 'OR',
    );
  }
  else if ($view->name == 'flag_feature_on_front_carousel' || $view->name == 'senator_carousel') {
    // Remove items that don't have a featured image from the front carousel.
    $query->where[0]['clauses'][] = "node_data_field_feature_image.field_feature_image_list IS NOT NULL";
  }
  else if ($view->name == 'admin_flags_gallery_request' && $view->current_display == 'page_3') {
    // Remove items that don't have a featured image from consideration for the front carousel.
    $query->where[0]['clauses'][] = "node_data_field_feature_image.field_feature_image_list IS NOT NULL";
  }
  else if (($view->name == 'flag_request_to_gallery') || ($view->name == 'flag_request_video_to_gallery')) {
	 if(user_access('view all requests to promote content') == false) {
      global $user;
      $query->where[0]['args'][0] = $user->uid;
	 }
	 else {
	   unset($query->where[0]['clauses'][1]);
	 }
  }
  // Set up an OR search query for counsel's custom search.
  else if ($view->name == 'counsel') {
    $query->where[0]['clauses'][0] = "search_index.word = 'democrat' OR search_index.word = 'republican' OR search_index.word = 'democrats' OR search_index.word = 'republicans' OR search_index.word = 'rep' OR search_index.word = 'dem'";
    $query->where[0]['args'][0] = $query->where[0]['args'][1];
    unset($query->where[0]['args'][1]);
  }
  // I Really Really do not like this work around but, the only thing I can think of to solve this problem if you have a better suggestion
  // please let Advomatic(Jonathan) know. Thanks.
  else if ($view->name == 'blog_search') {
    // If the filter is empty then unset the requirement for content to have a term associated.
    if (empty($view->exposed_input)) {
      unset($query->where[0]['clauses'][2]);
    }

    // If Issue filter is <Any> then unset the requirement for content to have a term associated.
    if ($view->exposed_input['tid'] == 'All' ) {
      // If the By Senator filter gets set then the where clauses change order so unset appropriately.
      if ($view->exposed_input['field_senator_nid'] == 'All') {
        unset($query->where[0]['clauses'][2]);
      }
      else {
        unset($query->where[0]['clauses'][3]);
      }
    }

    // If the date is not set then remove it from the where clause.
    if ($view->exposed_input['date_filter']['min']['date'] == 0) {
      unset($query->where['date']);
    }
  }
  else if ($view->name == 'search') {
    // We need to allow table sort ordering by Category, Senator & Committee.
    $order = $_GET['order'];
    $sort = strtolower($_GET['sort']) == 'desc' ? 'DESC' : 'ASC';
    switch ($order) {
      case 'committee':
      case 'senator':
        // Add a relationship to the senator/committee node table.
        $query->relationships["node_node_data_field_$order"] = array(
          'link' => 'node',
          'table' => 'node',
          'base' => 'node',
        );
        $join = new views_join();
        $join->definition = array(
          'base' => 'node',
          'field' => 'nid',
          'handler' => 'content_handler_relationship',
          'content_field_name' => "field_$order",
          'table' => 'node',
          'left_table' => "node_data_field_$order",
          'left_field' => "field_{$order}_nid",
        );
        $join->extra_type = 'AND';
        $join->table = 'node';
        $join->left_table = "node_data_field_$order";
        $join->left_field = "field_{$order}_nid";
        $join->field = 'nid';
        $join->type = 'LEFT';
        $join->adjusted = TRUE;
        $query->table_queue["node_node_data_field_$order"] = array(
          'table' => 'node',
          'num' => 1,
          'alias' => "node_node_data_field_$order",
          'relationship' => 'node',
          'join' => $join,
        );
        // Order by the senator/committee title.
        $query->orderby = array("node_node_data_field_$order.title ". $sort);
        break;
      case 'category':
        // Add the Term data table so we can sort by taxonomy term name.
        $query->tables['node']['term_data'] = array(
          'count' => 1,
          'alias' => 'term_data'
        );
        $join = new views_join();
        $join->definition = array(
          'left_field' => 'tid',
          'field' => 'tid',
          'table' => 'term_data',
          'left_table' => 'term_node',
        );
        $join->extra_type = 'AND';
        $join->table = 'term_data';
        $join->left_table = 'term_node';
        $join->left_field = 'tid';
        $join->field = 'tid';
        $join->type = 'INNER';
        $join->adjusted = TRUE;
        $query->table_queue['term_data'] = array(
          'table' => 'term_data',
          'num' => 1,
          'alias' => 'term_data',
          'relationship' => 'term_node',
          'join' => $join,
        );
        $query->orderby = array('term_data.name '. $sort);
        break;
    }
  }
}

/**
 * Implementation of hook_codify().
 */
function nyss_views_codify() {
  return array(
    'nyss_views' => array(
      'views' => 'views',
      'views_alter' => 'alter_includes',
    ),  
  );
}

/**
 *  Implements hook_views_pre_render().
 */
function nyss_views_views_pre_render(&$view) {
  // Fix page title on senator content breakout pages
  if ($view->name == 'senator_content_types') {
    $senator_name = '';
    if (context_isset('nyss', 'senator')) {
      $senator = context_get('nyss', 'senator');
      if (substr($senator->title, -7) == 'Martins' || substr($senator->title, -6) == 'Skelos') {
        $senator_name = $senator->title . "' ";
      } else {
        $senator_name = $senator->title . "'s ";
      }
    }
    drupal_set_title($senator_name . nyss_misc_content_name_plural(arg(3)));
  }
}

/**
* Preprocess hook for location().
*/
function nyss_views_preprocess_location(&$variables) {
  if (!isset($variables['location']['name']) && isset($variables['location']['lid'])) {
    $variables['location'] = array_merge($variables['location'], location_load_location($variables['location']['lid']));
    template_preprocess_location($variables);
  }
}

/**
 * Implementation of hook_form_views_exposed_form_alter().
 * Changes wording of content selection form for committee pages
 */
function nyss_views_form_views_exposed_form_alter (&$form, $form_state) {
  if (substr($form['#id'], 0, 33) == 'views-exposed-form-senate-updates') {
    $form['type']['#options']['All'] = t('<All>');
    $form['type']['#options']['webform'] = t('Survey');
    $form['type']['#options']['campaign'] = t('Petition');
    $form['submit']['#value'] = t('Filter');
    natcasesort($form['type']['#options']);
  }
  else if (substr($form['#id'], 0, 36) == 'views-exposed-form-committee-updates') {
    $form['type']['#options']['All'] = t('<All>');
    $form['type']['#options']['webform'] = t('Survey');
    $form['submit']['#value'] = t('Filter');
    natcasesort($form['type']['#options']);
  }
  else if (substr($form['#id'], 0, 37) == 'views-exposed-form-initiative-updates') {
    $form['type']['#options']['All'] = t('<All>');
    $form['submit']['#value'] = t('Filter');
    natcasesort($form['type']['#options']);
  }
  else if ($form['#id'] == 'views-exposed-form-gallery-page-1') {
    $form['submit']['#value'] = t('Search');
    $form['submit']['#weight'] = 10;
    $form['nothumbs_link'] = array(
        '#value' => '<div>' . l(t('Show text-only video list'), 'video_nothumbs') . '</div>',
      );
    $form['video_type'] = array(
      '#type' => 'select',
      '#options' => array('' => t('<Any>')) + nyss_videosettings_types(),
      '#default_value' => '',
    );
  }
  else if ($form['#id'] == 'views-exposed-form-gallery-page-7') {
    $form['submit']['#value'] = t('Search');
    $form['submit']['#weight'] = 10;
    $form['nothumbs_link'] = array(
        '#value' => '<div>' . l(t('Show video thumbnails'), 'video') . '</div>',
      );
    $form['video_type'] = array(
      '#type' => 'select',
      '#options' => array('' => t('<Any>')) + nyss_videosettings_types(),
      '#default_value' => '',
    );
  }
}

/**
 *  Returns the value from a field of a related node, for use as a views argument
 *
 *  @param $type
 *    The node type of the related node, e.g., 'senator', 'committee', 'organization', 'initiative'
 *  @param $field
 *    The node field to return, e.g., 'title' or 'nid'
 *  @return
 *    The value of the specified field, or FALSE if no related node exists.
 */
function nyss_views_related_argument($type, $field='title') {
  if (function_exists("nyss_$type")) {
    $node = call_user_func("nyss_$type");
    if ($node) {
      return $node->{$field};
    }
  }
}

/**
 *  Validates an argument intended to reference the field of a related node
 *
 *  @param $type
 *    The node type of the related node, e.g., 'senator', 'committee', 'organization', 'initiative'
 *  @param $argument
 *    The argument value
 *  @param &$handler
 *    The handler, used to reset $handler->argument
 *  @param $field
 *    The node field to return, e.g., 'title' or 'nid'
 *  @return
 *    The value of the specified field, or FALSE if no related node exists.
 */
function nyss_views_related_argument_validate($type, $argument, &$handler, $field='title') {
  if ($field == 'nid') {
    $node = node_load($argument);
    if ($node && $node->type == $type) {
      $handler->argument = $node->nid;
      return TRUE;
    }
    return FALSE;
  }
  if (function_exists("nyss_$type" . "_node_from_title")) {
    $node = call_user_func("nyss_$type" . "_node_from_title", $argument);
    if ($node) {
      $handler->argument = $node->{$field};
      return TRUE;
    }
  }
  if (function_exists("nyss_$type")) {
    $node = call_user_func("nyss_$type");
    if ($node) {
      $handler->argument = $node->{$field};
      return TRUE;
    }
  }
  return FALSE;
}
