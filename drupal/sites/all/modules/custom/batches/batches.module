<?php
// $Id$

/**
 *  @file
 *  Batches
 *
 *  This module uses Drupal's batch API to create batch jobs 
 *  that can be used to perform time-consuming maintenance
 *  tasks on Drupal websites.
 *
 */

/**
 * Implementation of hook_menu().
 */
function batches_menu() {
  $items = array();
  $items['admin/content/batches'] = array(
    'title' => t('Batches'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('batches_admin_settings'),
    'access arguments' => array('administer batches'),
    'type' => MENU_LOCAL_TASK,
  );
  foreach (batches_list() as $batch) {
    $items['admin/content/batches/' . $batch->name] = array(
      'title' => t('Perform batch !name', array('!name' => $batch->name)),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('batches_' . $batch->name),
      'access arguments' => array('administer batches'),
      'type' => MENU_CALLBACK,
      'parent' => 'admin/content/batches',
      'file' => 'includes/' . $batch->basename,
    );
  }
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function batches_perm() {
  return array('administer batches');
}

/**
 * Returns a list of available batch job files.
 *
 * @return
 *   an array of file objects.
 */
function batches_list(){
  $batches = array();
  $path = drupal_get_path('module', 'batches') . '/includes';
  $files = drupal_system_listing('.inc$', $path, 'name', 0);
  foreach($files as $file) {
    $batches[] = $file;
  }
  return $batches;
}

/**
 * Form builder; configure the list of available batche jobs.
 *
 * For now, this just creates a Drupal page with links to each available batch job.
 * Future development would make this a real settings page where users can enable or
 * disable batch jobs and also perhaps set some parameters.
 *
 * @ingroup forms
 * @see system_settings_form()
 */
function batches_admin_settings() {
  foreach (batches_list() as $batch) {
    $basename = $batch->basename;
    $filename = $batch->filename;
    $name = $batch->name;
    $names[] = $batch->name;
    $batches[] = l($batch->name, 'admin/content/batches/' . $batch->name);
  }
  $form['batches_list'] = array(
    '#value' => '<ul><li>' . implode('</li><li>', $batches) . '</li></ul>',
    '#weight' => -5,
  );
  return system_settings_form($form);
}

/**
 * Implementation of hook_node_operations().
 */
function batches_node_operations() {
  $operations = array(
    'set_bronto_mailing_list' => array(
      'label' => t('Set Bronto mailing list from path alias'),
      'callback' => 'batches_node_operations_update',
    ),
  );
  return $operations;
}

/**
 * Callback function for updating node aliases.
 *
 * @param $nodes
 *   Array of node nid's.
 */
function batches_node_operations_update($nodes) {
  foreach ($nodes as $nid) {
    $node = node_load($nid);
    if ($node->type == 'committee' || $node->type == 'senator') {
      $node->field_bronto_mailing_list[0]['value'] = nyss_signup_calculate_list_name_from_nid($nid);
      node_save($node);
    }
  }
}

